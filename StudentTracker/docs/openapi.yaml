openapi: 3.0.3
info:
  title: StudentTracker API
  version: 1.0.0
  description: |
    REST API for managing students with JWT authentication.
    
    All /students endpoints require a valid JWT in the Authorization header.
servers:
  - url: http://localhost:8080
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
    RegisterRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
        password:
          type: string
    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
    Student:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        age:
          type: integer
        grade:
          type: number
          format: double
paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              example:
                value:
                  username: alice
                  password: secret123
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example:
                  value:
                    id: 1
                    username: alice
        '409':
          description: Username already exists
        '400':
          description: Invalid input
  /login:
    post:
      summary: Login and receive a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              example:
                value:
                  username: alice
                  password: secret123
      responses:
        '200':
          description: JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                example:
                  value:
                    token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid credentials
        '400':
          description: Invalid input
  /students:
    get:
      summary: Get all students
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
              examples:
                example:
                  value:
                    - id: 1
                      firstName: Alice
                      lastName: Smith
                      age: 20
                      grade: 18.5
                    - id: 2
                      firstName: Bob
                      lastName: Brown
                      age: 22
                      grade: 15.0
        '401':
          description: Unauthorized
    post:
      summary: Create a new student
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
            examples:
              example:
                value:
                  firstName: Charlie
                  lastName: Johnson
                  age: 21
                  grade: 17.0
      responses:
        '201':
          description: Student created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
              examples:
                example:
                  value:
                    id: 3
                    firstName: Charlie
                    lastName: Johnson
                    age: 21
                    grade: 17.0
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
  /students/{id}:
    get:
      summary: Get a student by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Student found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
              examples:
                example:
                  value:
                    id: 1
                    firstName: Alice
                    lastName: Smith
                    age: 20
                    grade: 18.5
        '404':
          description: Student not found
        '401':
          description: Unauthorized
    put:
      summary: Update a student by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
            examples:
              example:
                value:
                  firstName: Alice
                  lastName: Smith
                  age: 21
                  grade: 19.0
      responses:
        '200':
          description: Student updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
              examples:
                example:
                  value:
                    id: 1
                    firstName: Alice
                    lastName: Smith
                    age: 21
                    grade: 19.0
        '400':
          description: Invalid input
        '404':
          description: Student not found
        '401':
          description: Unauthorized
    delete:
      summary: Delete a student by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Student deleted
        '404':
          description: Student not found
        '401':
          description: Unauthorized 